version: '3.8'  # Specify the version

services:
  db:
    image: postgres:13
    environment:
      POSTGRES_DB: ${DJANGO_DB_NAME}
      POSTGRES_USER: ${DJANGO_DB_USER}
      POSTGRES_PASSWORD: ${DJANGO_DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Persist PostgreSQL data
    networks:
      - app-network  # Use the defined network

  backend:
    build:
      context: ./backend/blogproject  # Path to the backend directory
      dockerfile: Dockerfile  # Specify the Dockerfile if itâ€™s not named 'Dockerfile'
    volumes:
      - ./backend/blogproject:/app  # Mount the backend directory to the container
    ports:
      - "8000:8000"  # Map port 8000 of the container to port 8000 on the host
    depends_on:
      - db  # This should be a list of dependencies
    environment:
      DJANGO_DB_ENGINE: django.db.backends.postgresql  # Specify the database engine
      DJANGO_DB_NAME: ${DJANGO_DB_NAME}  # Load database name from environment
      DJANGO_DB_USER: ${DJANGO_DB_USER}  # Load database user from environment
      DJANGO_DB_PASSWORD: ${DJANGO_DB_PASSWORD}  # Load database password from environment
      DJANGO_DB_HOST: db  # Set the database host to the service name
      DJANGO_DB_PORT: 5432  # Set the database port
      SECRET_KEY: ${SECRET_KEY}  # Load the secret key from environment
    networks:
      - app-network  # Use the defined network

  frontend:
    build:
      context: ./frontend  # Path to the frontend directory
    volumes:
      - ./frontend:/app  # Mount the frontend directory to the container
    ports:
      - "3000:3000"  # Map port 3000 of the container to port 3000 on the host
    depends_on:
      - backend  # This should also be a list of dependencies
    networks:
      - app-network  # Use the defined network

networks:
  app-network:  # Define a custom network

volumes:
  postgres_data:  # Named volume for PostgreSQL data
